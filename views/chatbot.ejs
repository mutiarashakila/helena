<!DOCTYPE html>
<html lang="id">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Helena</title>
    <link rel="icon" type="image/png" href="img/icon.png">
    <link rel="stylesheet" href="/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="/fonts/fontawesome-all.min.css">
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="stylesheet" href="/fonts/material-icons.min.css">
    <link rel="stylesheet" href="/css/chatbot.css">
</head>

<body>
    <div id="wrapper" class="d-flex">
        <%- include('partials/sidebar') %>
            <div class="container chatbot-container">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h3 class="mb-0"><i class="fas fa-robot"></i> Chatbot</h3>
                    <div>
                        <button class="btn btn-sm btn-outline-danger" onclick="clearChat()" title="Bersihkan Chat">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                <div class="chat-messages" id="chatbotMessages"></div>
                <form id="chatbotForm" class="d-flex">
                    <input type="text" class="form-control me-2" id="chatbotInput" placeholder="Ketik pesan...">
                    <button class="btn btn-primary" type="submit"><i class="fas fa-paper-plane"></i></button>
                </form>
            </div>
    </div>
    <script>
        const currentUser = '<%= locals.currentUser %>';
        const userType = '<%= locals.userType %>';
        let carouselCounter = 0;

        const texts = {
            greeting: 'Hi! Saya Helena ðŸ‘‹, Ada yang bisa saya bantu?',
            helpButton: 'Panduan',
            typing: 'Sedang mengetik...',
            error: 'Maaf, terjadi kesalahan.',
            serverError: 'Maaf, server tidak merespon.',
            clearConfirm: 'Yakin ingin menghapus semua percakapan?',
            helpCommand: 'bantuan'
        };

        function getChatKey() {
            return `chatbot_${userType}_${currentUser}_${Date.now()}`;
        }

        function addInitialMessage() {
            const chat = document.getElementById('chatbotMessages');
            const initialMessage = `
        <div class="message-container bot">
            <div class="initial-message-wrapper">
                <div class="initial-bot-bubble">${texts.greeting}</div>
                <button class="btn help-button-compact" onclick="triggerHelpIntent()">
                    <i class="fas fa-lightbulb me-1"></i> ${texts.helpButton}
                </button>
            </div>
        </div>
    `;
            chat.innerHTML = initialMessage;
        }

        function triggerHelpIntent() {
            const input = document.getElementById('chatbotInput');
            input.value = texts.helpCommand;
            document.getElementById('chatbotForm').dispatchEvent(new Event('submit'));
        }

        function populateInput(query) {
            const input = document.getElementById('chatbotInput');
            input.value = query;
            input.focus();
        }

        function renderQuickReplies(suggestions) {
            if (!suggestions || suggestions.length === 0) return '';

            const iconMap = {
                'location': { icon: 'fa-map-marker-alt', style: 'fas' },
                'price': { icon: 'fa-money-bill-wave', style: 'fas' },
                'quantity': { icon: 'fa-chart-bar', style: 'fas' },
                'owner': { icon: 'fa-user', style: 'far' },
                'status': { icon: 'fa-clipboard', style: 'far' },
                'guide': { icon: 'fa-lightbulb', style: 'fas' }
            };

            const chips = suggestions.map(s => {
                const iconData = iconMap[s.icon] || { icon: 'fa-question-circle', style: 'far' };
                return `<button class="quick-reply-chip" onclick="populateInput('${s.query.replace(/'/g, "\\'")}')">
            <i class="${iconData.style} ${iconData.icon} me-1"></i> ${s.text}
        </button>`;
            }).join('');

            return `<div class="quick-replies">${chips}</div>`;
        }

        function renderCards(data) {
            if (!data || !data.groups) return '';

            let html = '<div class="card-container">';

            data.groups.forEach((group, groupIndex) => {
                const itemCount = group.items.length;
                const visibleCount = 3;
                const uniqueId = `carousel-${carouselCounter++}-${groupIndex}`;

                html += `<div class="card-group">`;
                html += `<div class="card-group-header">${group.groupName}</div>`;

                if (itemCount > visibleCount) {
                    html += `<div class="carousel-container">`;
                    html += `<button class="carousel-arrow left" onclick="scrollCarousel('${uniqueId}', -1)" id="prev-${uniqueId}">
                        <i class="fas fa-chevron-left"></i>
                     </button>`;
                    html += `<div class="cards-wrapper" id="${uniqueId}">`;
                } else {
                    html += `<div class="cards-wrapper">`;
                }

                group.items.forEach(item => {
                    html += renderCard(item);
                });

                html += `</div>`;

                if (itemCount > visibleCount) {
                    html += `<button class="carousel-arrow right" onclick="scrollCarousel('${uniqueId}', 1)" id="next-${uniqueId}">
                        <i class="fas fa-chevron-right"></i>
                     </button>`;
                    html += `</div>`;
                }

                html += `</div>`;
            });

            html += '</div>';
            return html;
        }

        function scrollCarousel(groupId, direction) {
            const wrapper = document.getElementById(groupId);
            const cardWidth = 170;
            const scrollAmount = cardWidth * 3;

            wrapper.scrollBy({
                left: direction * scrollAmount,
                behavior: 'smooth'
            });

            setTimeout(() => updateCarouselButtons(groupId), 300);
        }

        function updateCarouselButtons(groupId) {
            const wrapper = document.getElementById(groupId);
            const prevBtn = document.getElementById('prev-' + groupId);
            const nextBtn = document.getElementById('next-' + groupId);

            if (!wrapper || !prevBtn || !nextBtn) return;

            const tolerance = 5;
            const isAtStart = wrapper.scrollLeft <= tolerance;
            const isAtEnd = wrapper.scrollLeft >= (wrapper.scrollWidth - wrapper.clientWidth - tolerance);

            prevBtn.disabled = isAtStart;
            nextBtn.disabled = isAtEnd;
        }

        function renderCard(item) {
            const mainInfo = getMainInfo(item);

            return `
        <div class="item-card" onclick='openModal(${JSON.stringify(item).replace(/'/g, "&#39;")})'>
            <img src="${item.gambar}" alt="${item.nama_barang}" class="card-image" 
                 onerror="this.src='/img/no-image.svg'">
            <div class="card-body">
                <div class="card-title" title="${item.nama_barang}">${item.nama_barang}</div>
                ${mainInfo}
            </div>
            <div class="card-footer">
                <button class="view-detail-btn">
                    Lihat Detail <i class="fas fa-arrow-right"></i>
                </button>
            </div>
        </div>
    `;
        }

        function getMainInfo(item) {
            let html = '';

            const currentIntent = window.lastIntent || 'harga_barang';

            if (currentIntent === 'harga_barang') {
                if (item.harga_barang) {
                    html += `<div class="card-info" style="font-size: 15px; font-weight: 700; color: #007bff;">
                <i class="fas fa-tag"></i> Rp ${item.harga_barang.toLocaleString()}
            </div>`;
                }
                if (item.lokasi_barang) {
                    html += `<div class="card-info" style="font-size: 11px; color: #666;">
                <i class="fas fa-map-marker-alt"></i> ${item.lokasi_barang}
            </div>`;
                }
            } else if (currentIntent === 'lokasi_barang') {
                if (item.lokasi_barang) {
                    html += `<div class="card-info" style="font-size: 14px; font-weight: 700; color: #28a745;">
                <i class="fas fa-map-marker-alt"></i> ${item.lokasi_barang}
            </div>`;
                }
                if (item.status_barang) {
                    html += `<div class="card-info" style="font-size: 11px; color: #666;">
                <i class="fas fa-info-circle"></i> ${item.status_barang}
            </div>`;
                }
            } else if (currentIntent === 'kepemilikan_barang') {
                if (item.pemilik) {
                    html += `<div class="card-info" style="font-size: 13px; font-weight: 700; color: #6f42c1;">
                <i class="fas fa-user"></i> ${item.pemilik}
            </div>`;
                }
                if (item.jabatan) {
                    html += `<div class="card-info" style="font-size: 11px; color: #666;">
                ${item.jabatan}
            </div>`;
                }
            } else if (currentIntent === 'status_barang') {
                if (item.status_barang) {
                    html += `<div class="card-info" style="font-size: 14px; font-weight: 700; color: #17a2b8;">
                <i class="fas fa-clipboard"></i> ${item.status_barang}
            </div>`;
                }
                if (item.kondisi_barang) {
                    html += `<div class="card-info" style="font-size: 11px; color: #666;">
                Kondisi: ${item.kondisi_barang}
            </div>`;
                }
            } else if (currentIntent === 'jumlah_barang') {
                if (item.jumlah) {
                    html += `<div class="card-info" style="font-size: 15px; font-weight: 700; color: #fd7e14;">
                <i class="fas fa-box"></i> ${item.jumlah} unit
            </div>`;
                }
                if (item.lokasi_barang) {
                    html += `<div class="card-info" style="font-size: 11px; color: #666;">
                <i class="fas fa-map-marker-alt"></i> ${item.lokasi_barang}
            </div>`;
                }
            } else {
                if (item.harga_barang) {
                    html += `<div class="card-info"><i class="fas fa-tag"></i> Rp ${item.harga_barang.toLocaleString()}</div>`;
                }
                if (item.lokasi_barang) {
                    html += `<div class="card-info"><i class="fas fa-map-marker-alt"></i> ${item.lokasi_barang}</div>`;
                }
            }

            return html;
        }

        function openModal(item) {
            const modal = document.createElement('div');
            modal.className = 'detail-modal';
            modal.id = 'detailModal';

            const isAdmin = userType === 'admin';
            const editButton = isAdmin ?
                `<button class="btn-modal btn-modal-primary" onclick="window.location.href='/barang?id=${item.id_barang}&action=edit'">
            <i class="fas fa-edit"></i> Edit Data Barang
        </button>` : '';

            modal.innerHTML = `
    <div class="modal-content-custom">
        <div class="modal-header-custom">
            <h5>${item.nama_barang}</h5>
            <button class="close-modal" onclick="closeModal()">&times;</button>
        </div>
        <div class="modal-body-custom">
            <img src="${item.gambar}" alt="${item.nama_barang}" class="modal-image" 
                 onerror="this.src='/img/no-image.svg'">
            
            ${item.harga_barang ? `
            <div class="modal-info-group">
                <div class="modal-info-label">Harga</div>
                <div class="modal-info-value">Rp ${item.harga_barang.toLocaleString()}</div>
            </div>` : ''}
            
            ${item.lokasi_barang ? `
            <div class="modal-info-group">
                <div class="modal-info-label">Lokasi</div>
                <div class="modal-info-value">${item.lokasi_barang}</div>
            </div>` : ''}
            
            ${item.status_barang ? `
            <div class="modal-info-group">
                <div class="modal-info-label">Status</div>
                <div class="modal-info-value">${item.status_barang}</div>
            </div>` : ''}
            
            ${item.kondisi_barang ? `
            <div class="modal-info-group">
                <div class="modal-info-label">Kondisi</div>
                <div class="modal-info-value">${item.kondisi_barang}</div>
            </div>` : ''}
            
            ${item.pemilik ? `
            <div class="modal-info-group">
                <div class="modal-info-label">Pemilik</div>
                <div class="modal-info-value">${item.pemilik}${item.jabatan ? ` (${item.jabatan})` : ''}</div>
            </div>` : ''}
            
            ${item.jumlah ? `
            <div class="modal-info-group">
                <div class="modal-info-label">Jumlah</div>
                <div class="modal-info-value">${item.jumlah} unit</div>
            </div>` : ''}
        </div>
        <div class="modal-footer-custom">
            <button class="btn-modal btn-modal-secondary" onclick="closeModal()">Tutup</button>
            ${editButton}
        </div>
    </div>
`;

            document.body.appendChild(modal);
            setTimeout(() => modal.classList.add('show'), 10);

            modal.addEventListener('click', (e) => {
                if (e.target === modal) closeModal();
            });
        }

        function closeModal() {
            const modal = document.getElementById('detailModal');
            if (modal) {
                modal.classList.remove('show');
                setTimeout(() => modal.remove(), 200);
            }
        }

        function saveChatToSession() {
            const chatMessages = document.getElementById('chatbotMessages').innerHTML;
            const chatKey = getChatKey();
            sessionStorage.setItem('current_chat_key', chatKey);
            sessionStorage.setItem(chatKey, chatMessages);
        }

        function loadChatFromSession() {
            const currentChatKey = sessionStorage.getItem('current_chat_key');
            if (currentChatKey && currentChatKey.includes(currentUser)) {
                const savedMessages = sessionStorage.getItem(currentChatKey);
                if (savedMessages) {
                    document.getElementById('chatbotMessages').innerHTML = savedMessages;
                    document.getElementById('chatbotMessages').scrollTop = document.getElementById('chatbotMessages').scrollHeight;
                } else {
                    addInitialMessage();
                }
            } else {
                addInitialMessage();
            }
        }

        function clearChat() {
            if (confirm(texts.clearConfirm)) {
                addInitialMessage();
                const currentChatKey = sessionStorage.getItem('current_chat_key');
                if (currentChatKey) {
                    sessionStorage.removeItem(currentChatKey);
                }
                carouselCounter = 0;
                saveChatToSession();
            }
        }

        window.onload = function () {
            Object.keys(sessionStorage).forEach(key => {
                if (key.startsWith('chatbot_') && !key.includes(currentUser)) {
                    sessionStorage.removeItem(key);
                }
            });
            loadChatFromSession();
        }

        document.getElementById('chatbotForm').onsubmit = async function (e) {
            e.preventDefault();
            var input = document.getElementById('chatbotInput');
            var msg = input.value.trim();
            if (!msg) return;

            var chat = document.getElementById('chatbotMessages');

            chat.innerHTML += '<div class="message-container user"><div class="message-bubble user-message">' + msg + '</div></div>';
            chat.scrollTop = chat.scrollHeight;
            saveChatToSession();
            input.value = '';

            chat.innerHTML += '<div class="message-container bot" id="loading-bot"><div class="message-bubble bot-message">' + texts.typing + '</div></div>';
            chat.scrollTop = chat.scrollHeight;
            saveChatToSession();

            try {
                const response = await fetch('/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: msg })
                });
                const data = await response.json();

                if (data.intent) {
                    window.lastIntent = data.intent;
                }

                var loading = document.getElementById('loading-bot');
                if (loading) loading.remove();

                if (data && data.response) {
                    const messageContainer = document.createElement('div');
                    messageContainer.className = 'message-container bot';

                    let messageContent = '';

                    // âœ… FIX: Validasi lebih ketat - cek apakah ada item yang valid
                    const hasValidData = data.data &&
                        data.data.groups &&
                        data.data.groups.length > 0 &&
                        data.data.groups.some(g => g.items && g.items.length > 0);

                    if (hasValidData) {
                        messageContent = '<div class="message-with-cards">';
                        messageContent += `<div class="message-text-above">${data.response}</div>`;
                        messageContent += renderCards(data.data);
                        messageContent += '</div>';
                    } else {
                        // âœ… Render text biasa (termasuk pesan fuzzy fallback)
                        const hasImages = data.response.includes('<img') || data.response.includes('<strong>') || data.response.includes('<br>');
                        const formattedResponse = hasImages ? data.response : data.response.replace(/\n/g, '<br>');

                        messageContent += '<div class="message-bubble bot-message">';
                        messageContent += formattedResponse;
                        messageContent += '</div>';
                    }

                    messageContainer.innerHTML = messageContent;
                    chat.appendChild(messageContainer);

                    if (data.data && data.data.groups) {
                        data.data.groups.forEach((group, idx) => {
                            if (group.items.length > 3) {
                                const uniqueId = `carousel-${carouselCounter - data.data.groups.length + idx}-${idx}`;
                                updateCarouselButtons(uniqueId);
                            }
                        });
                    }

                    const isNotFoundMessage = data.response.toLowerCase().includes('tidak ditemukan');

                    if (data.suggestions && data.suggestions.length > 0 && !isNotFoundMessage) {
                        const quickReplyContainer = document.createElement('div');
                        quickReplyContainer.className = 'message-container bot';
                        quickReplyContainer.style.marginTop = '0';
                        quickReplyContainer.innerHTML = renderQuickReplies(data.suggestions);
                        chat.appendChild(quickReplyContainer);
                    }

                    chat.scrollTop = chat.scrollHeight;
                    saveChatToSession();
                } else {
                    chat.innerHTML += '<div class="message-container bot"><div class="message-bubble bot-message" style="background: #dc3545; color: white;">' + texts.error + '</div></div>';
                }
                chat.scrollTop = chat.scrollHeight;
                saveChatToSession();
            } catch (err) {
                var loading = document.getElementById('loading-bot');
                if (loading) loading.remove();

                chat.innerHTML += '<div class="message-container bot"><div class="message-bubble bot-message" style="background: #dc3545; color: white;">' + texts.serverError + '</div></div>';
                chat.scrollTop = chat.scrollHeight;
            }
        };

        function clearChatOnLogout() {
            sessionStorage.removeItem('chatbot_session');
            localStorage.removeItem('chatbot_session');
        }
    </script>
    <script src="/bootstrap/js/bootstrap.min.js"></script>
</body>

</html>